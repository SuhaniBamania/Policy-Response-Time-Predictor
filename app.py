# app.py
from flask import Flask, request, jsonify, render_template
import pandas as pd
import joblib
import datetime

app = Flask(__name__, template_folder='templates')

MODEL_PATH = 'model.pkl'
TRAIN_DATA_PATH = 'train_dataset.csv'

try:
    print("Loading the trained model...")
    model = joblib.load(MODEL_PATH)
    print("Model loaded successfully.")
    
    print(f"Loading data from '{TRAIN_DATA_PATH}' for UI options...")
    df_train = pd.read_csv(TRAIN_DATA_PATH)
    print("UI data loaded.")

except FileNotFoundError:
    print(f"ERROR: Model ('{MODEL_PATH}') or training data ('{TRAIN_DATA_PATH}') not found.")
    model = None
    df_train = pd.DataFrame()

if not df_train.empty:
    dropdown_options = {
        'request_type': sorted(df_train['request_type'].unique().tolist()),
        'department': sorted(df_train['department'].unique().tolist()),
        'category': sorted(df_train['category'].unique().tolist()),
        'state': sorted(df_train['state'].unique().tolist()),
        'region': sorted(df_train['region'].unique().tolist()),
        'applicant_type': sorted(df_train['applicant_type'].unique().tolist()),
        'language': sorted(df_train['language'].unique().tolist()),
    }
else:
    dropdown_options = {}

@app.route('/')
def index():
    return render_template('index.html', options=dropdown_options)

@app.route('/predict', methods=['POST'])
def predict():
    if model is None:
        return jsonify({"success": False, "error": "Model not loaded."}), 500

    try:
        data = request.get_json()
        if not data:
            return jsonify({"success": False, "error": "Invalid input."}), 400

        input_df = pd.DataFrame([data])
        
        predicted_days = model.predict(input_df)[0]
        predicted_days = int(round(predicted_days))

        risk_level = 'High' if predicted_days > 35 else 'Medium' if predicted_days > 20 else 'Low'
        priority = 'High' if risk_level == 'High' or data.get('applicant_type') == 'VIP' else 'Medium'
        complexity = 'High' if data.get('request_type') == 'Appeal' or predicted_days > 30 else 'Medium'
        
        seasons = ['Winter', 'Spring', 'Summer', 'Autumn']
        season = seasons[(data.get('filing_month', 1) - 1) // 3]

        prediction_data = {
            "predicted_days": predicted_days,
            "predicted_range": f"{max(5, predicted_days - 3)}-{predicted_days + 4} days",
            "risk_level": risk_level, "priority": priority, "complexity_level": complexity, "season": season,
            "confidence": 0.92,
            "anomaly_detection": { "anomaly_level": "Normal", "explanation": "Prediction generated by trained model." }
        }

        response = { "success": True, "data": prediction_data, "timestamp": datetime.datetime.utcnow().isoformat() + "Z" }
        return jsonify(response)

    except Exception as e:
        print(f"Error during prediction: {e}")
        return jsonify({"success": False, "error": "An internal error occurred."}), 500

if __name__ == '__main__':
    app.run(debug=True)
